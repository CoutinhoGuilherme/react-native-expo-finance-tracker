import { 
Â  View, 
Â  Text, 
Â  StyleSheet, 
Â  Pressable, // Mudado de TouchableOpacity para Pressable para consistÃªncia
Â  ScrollView, 
Â  SafeAreaView, // Adicionado
Â  Platform 
} from 'react-native';
// import { Link } from 'expo-router'; // NÃ£o usado diretamente para itens de lista aqui
import { Ionicons } from '@expo/vector-icons';
import { useTheme } from '../../contexts/ThemeContext';
import { useTransactions } from '../../contexts/TransactionContext';
import { useCurrency } from '../../contexts/CurrencyContext';
import Chart from '../../components/Chart';
// TransactionItem nÃ£o serÃ¡ mais usado diretamente, vamos re-renderizar no estilo SettingItem
// import TransactionItem from '../../components/TransactionItem'; 
import { useEffect, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useRouter } from 'expo-router';
// import Transactions from './transactions'; // NÃ£o parece estar sendo usado no cÃ³digo fornecido

// Importando Dimensions como na tela Settings, caso necessÃ¡rio para estilos futuros
import { Dimensions } from 'react-native';
const { width } = Dimensions.get('window');

// Definindo o tipo para o nosso novo TransactionSettingItem, similar ao SettingItemProps
type TransactionSettingItemProps = {
Â  icon: { 
Â  Â  name: keyof typeof Ionicons.glyphMap;
Â  Â  bg: string 
Â  };
Â  title: string;
Â  subtitle?: string;
Â  amount: string;
Â  amountColor: string;
Â  onPress?: () => void;
Â  isLast?: boolean;
};

export default function Home() {
Â  const { theme } = useTheme();
Â  const { transactions } = useTransactions();
Â  const { currency } = useCurrency();
Â  const router = useRouter();
Â  const [username, setUsername] = useState('');

Â  useEffect(() => {
Â  Â  const loadUsername = async () => {
Â  Â  Â  const name = await AsyncStorage.getItem('username');
Â  Â  Â  if (name) setUsername(name);
Â  Â  };
Â  Â  loadUsername();
Â  }, []);

Â  useEffect(() => {
Â  Â  AsyncStorage.getItem('token').then(token => {
Â  Â  Â  if (!token) {
Â  Â  Â  Â  router.replace('/LoginScreen'); 
Â  Â  Â  }
Â  Â  });
Â  }, []);
Â  
Â  const totals = transactions.reduce(
Â  Â  (acc, transaction) => {
Â  Â  Â  if (transaction.type === 'income') {
Â  Â  Â  Â  acc.income += transaction.amount;
Â  Â  Â  } else {
Â  Â  Â  Â  acc.expenses += Math.abs(transaction.amount);
Â  Â  Â  }
Â  Â  Â  acc.balance = acc.income - acc.expenses;
Â  Â  Â  return acc;
Â  Â  },
Â  Â  { balance: 0, income: 0, expenses: 0 }
Â  );

Â  const recentTransactions = transactions
Â  Â  .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
Â  Â  .slice(0, 5);

Â  const handleAddTransaction = () => {
Â  Â  router.push('/transactionForm');
Â  };

Â  // Componente TransactionSettingItem para replicar o visual do SettingItem da tela de ConfiguraÃ§Ãµes
Â  const TransactionSettingItem = ({ icon, title, subtitle, amount, amountColor, onPress, isLast }: TransactionSettingItemProps) => (
Â  Â  <Pressable
Â  Â  Â  style={[
Â  Â  Â  Â  styles.settingItem, 
Â  Â  Â  Â  { 
Â  Â  Â  Â  Â  backgroundColor: theme.surface || theme.background,
Â  Â  Â  Â  Â  borderBottomColor: theme.border,
Â  Â  Â  Â  Â  borderBottomWidth: isLast ? 0 : 1
Â  Â  Â  Â  }
Â  Â  Â  ]}
Â  Â  Â  onPress={onPress}
Â  Â  Â  android_ripple={{ color: theme.border }}
Â  Â  >
Â  Â  Â  <View style={[styles.iconContainer, { backgroundColor: icon.bg }]}>
Â  Â  Â  Â  <Ionicons name={icon.name} size={20} color="#fff" />
Â  Â  Â  </View>
Â  Â  Â  <View style={styles.settingContent}>
Â  Â  Â  Â  <Text style={[styles.settingTitle, { color: theme.text.primary }]} numberOfLines={1}>{title}</Text>
Â  Â  Â  Â  {subtitle && <Text style={[styles.settingSubtitle, { color: theme.text.secondary }]}>{subtitle}</Text>}
Â  Â  Â  </View>
Â  Â  Â  <View style={styles.transactionDetails}>
Â  Â  Â  Â  <Text style={[styles.transactionAmount, { color: amountColor }]}>{amount}</Text>
Â  Â  Â  Â  <Ionicons name="chevron-forward" size={20} color={theme.text.secondary} style={{ marginLeft: 4 }}/>
Â  Â  Â  </View>
Â  Â  </Pressable>
Â  );

Â  return (
Â  Â  <SafeAreaView style={[styles.safeArea, { backgroundColor: theme.background }]}>
Â  Â  Â  <ScrollView 
Â  Â  Â  Â  style={styles.scrollView}
Â  Â  Â  Â  showsVerticalScrollIndicator={false}
Â  Â  Â  Â  contentContainerStyle={styles.scrollContent}
Â  Â  Â  Â  contentInsetAdjustmentBehavior="automatic"
Â  Â  Â  >
Â  Â  Â  Â  {/* Header Adaptado */}
Â  Â  Â  Â  <View style={styles.header}>
Â  Â  Â  Â  Â  <View style={[styles.headerIconContainer, { backgroundColor: theme.primary }]}>
Â  Â  Â  Â  Â  Â  <Ionicons name="wallet-outline" size={32} color="white" />
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  <Text style={[styles.headerTitle, { color: theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  Saldo Atual: {currency.symbol}{totals.balance.toFixed(2)}
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  <Text style={[styles.headerSubtitle, { color: theme.text.secondary }]}>
Â  Â  Â  Â  Â  Â  OlÃ¡, {username} ðŸ‘‹ ({new Date().toLocaleDateString(undefined, { month: 'long', day: 'numeric' })})
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Stats Cards Section */}
Â  Â  Â  Â  <View style={styles.section}>
Â  Â  Â  Â  Â  <Text style={[styles.sectionTitle, { color: theme.text.secondary, marginLeft: 4 }]}>Resumo Financeiro</Text>
Â  Â  Â  Â  Â  <View style={styles.statsRow}>
Â  Â  Â  Â  Â  Â  <View style={[styles.statCard, { backgroundColor: theme.surface, shadowColor: theme.shadow || theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  Â  <View style={[styles.statIconContainer, { backgroundColor: '#4CAF50'}]}>
Â  Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-up-outline" size={22} color="#fff" />
Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.statLabel, { color: theme.text.secondary }]}>Receitas</Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.statAmount, { color: theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  Â  Â  {currency.symbol}{totals.income.toFixed(2)}
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  <View style={[styles.statCard, { backgroundColor: theme.surface, shadowColor: theme.shadow || theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  Â  <View style={[styles.statIconContainer, { backgroundColor: '#F44336'}]}>
Â  Â  Â  Â  Â  Â  Â  Â  <Ionicons name="arrow-down-outline" size={22} color="#fff" />
Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.statLabel, { color: theme.text.secondary }]}>Despesas</Text>
Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.statAmount, { color: theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  Â  Â  {currency.symbol}{totals.expenses.toFixed(2)}
Â  Â  Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>
Â  Â  Â  
Â  Â  Â  Â  {/* Chart Section */}
Â  Â  Â  Â  <View style={styles.section}>
Â  Â  Â  Â  Â  <Text style={[styles.sectionTitle, { color: theme.text.secondary, marginLeft: 4 }]}>VisÃ£o Geral GrÃ¡fica</Text>
Â  Â  Â  Â  Â  <View style={[styles.sectionContent, { backgroundColor: theme.surface, shadowColor: theme.shadow || theme.text.primary, padding: 10 }]}>
Â  Â  Â  Â  Â  Â  <Chart /> 
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Add Transaction Button - Estilo mais robusto */}
Â  Â  Â  Â  <View style={styles.addButtonContainer}>
Â  Â  Â  Â  Â  <Pressable 
Â  Â  Â  Â  Â  Â  style={({ pressed }) => [
Â  Â  Â  Â  Â  Â  Â  styles.addButton, 
Â  Â  Â  Â  Â  Â  Â  { backgroundColor: theme.primary },
Â  Â  Â  Â  Â  Â  Â  pressed && { opacity: 0.8 }
Â  Â  Â  Â  Â  Â  ]}
Â  Â  Â  Â  Â  Â  onPress={handleAddTransaction}
Â  Â  Â  Â  Â  Â  android_ripple={{ color: theme.primaryDark || theme.primary }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  <Ionicons name="add-circle-outline" size={24} color="#fff" style={{marginRight: 10}} />
Â  Â  Â  Â  Â  Â  <Text style={styles.addButtonText}>Adicionar TransaÃ§Ã£o</Text>
Â  Â  Â  Â  Â  </Pressable>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Recent Transactions Section */}
Â  Â  Â  Â  <View style={styles.section}>
Â  Â  Â  Â  Â  <Text style={[styles.sectionTitle, { color: theme.text.secondary, marginLeft: 4 }]}>TransaÃ§Ãµes Recentes</Text>
Â  Â  Â  Â  Â  <View style={[styles.sectionContent, { backgroundColor: theme.surface, shadowColor: theme.shadow || theme.text.primary }]}>
Â  Â  Â  Â  Â  Â  {recentTransactions.length > 0 ? recentTransactions.map((transaction, index) => (
Â  Â  Â  Â  Â  Â  Â  <TransactionSettingItem
Â  Â  Â  Â  Â  Â  Â  Â  key={transaction.id}
Â  Â  Â  Â  Â  Â  Â  Â  icon={{ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  name: transaction.type === 'income' ? 'arrow-up' : 'arrow-down', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  bg: transaction.type === 'income' ? '#4CAF50' : '#F44336' 
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  title={transaction.description}
Â  Â  Â  Â  Â  Â  Â  Â  subtitle={new Date(transaction.date).toLocaleDateString(undefined, { year: 'numeric', month: 'short', day: 'numeric' })}
Â  Â  Â  Â  Â  Â  Â  Â  amount={`${transaction.type === 'income' ? '+' : '-'}${currency.symbol}${Math.abs(transaction.amount).toFixed(2)}`}
Â  Â  Â  Â  Â  Â  Â  Â  amountColor={transaction.type === 'income' ? (theme.success || '#4CAF50') : (theme.danger || '#F44336')}
Â  Â  Â  Â  Â  Â  Â  Â  onPress={() => router.push({ 
Â  Â  Â  Â  Â  Â  Â  Â  Â  pathname: '/transactionForm', 
Â  Â  Â  Â  Â  Â  Â  Â  Â  params: { transactionId: String(transaction.id) } 
Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  isLast={index === recentTransactions.length - 1}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  )) : (
Â  Â  Â  Â  Â  Â  Â  <View style={styles.emptyStateContainer}>
Â  Â  Â  Â  Â  Â  Â  Â  <Ionicons name="reader-outline" size={48} color={theme.text.secondary} />
Â  Â  Â  Â  Â  Â  Â  Â  <Text style={[styles.emptyStateText, {color: theme.text.secondary}]}>Nenhuma transaÃ§Ã£o recente.</Text>
Â  Â  Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </View>
Â  Â  Â  Â  </View>

Â  Â  Â  Â  {/* Footer (opcional, mas para manter consistÃªncia com Settings) */}
Â  Â  Â  Â  <View style={styles.footer}>
Â  Â  Â  Â  Â  <Text style={[styles.footerText, { color: theme.text.secondary }]}>
Â  Â  Â  Â  Â  Â  Dados financeiros atualizados.
Â  Â  Â  Â  Â  </Text>
Â  Â  Â  Â  </View>
Â  Â  Â  </ScrollView>
Â  Â  </SafeAreaView>
Â  );
}

const styles = StyleSheet.create({
Â  safeArea: {
Â  Â  flex: 1,
Â  },
Â  scrollView: {
Â  Â  flex: 1,
Â  },
Â  scrollContent: {
Â  Â  paddingBottom: 20, // Similar to Settings
Â  },
Â  header: { // Adaptado do Settings Header
Â  Â  alignItems: 'center',
Â  Â  paddingVertical: 32,
Â  Â  paddingHorizontal: 20,
Â  Â  borderBottomWidth: 1, // Pode adicionar uma borda se quiser separar visualmente
Â  Â  // borderBottomColor: theme.border, // Precisa do theme aqui ou passar via inline style
Â  },
Â  headerIconContainer: { // Do Settings
Â  Â  width: 64,
Â  Â  height: 64,
Â  Â  borderRadius: 32,
Â  Â  justifyContent: 'center',
Â  Â  alignItems: 'center',
Â  Â  marginBottom: 16,
Â  Â  shadowOffset: { width: 0, height: 2 },
Â  Â  shadowOpacity: 0.1,
Â  Â  shadowRadius: 8,
Â  Â  elevation: 4,
Â  },
Â  headerTitle: { // Adaptado do Settings 'title'
Â  Â  fontSize: 22, // Um pouco menor para acomodar o saldo
Â  Â  fontWeight: '700',
Â  Â  marginBottom: 8,
Â  Â  textAlign: 'center',
Â  },
Â  headerSubtitle: { // Adaptado do Settings 'subtitle'
Â  Â  fontSize: 15,
Â  Â  textAlign: 'center',
Â  Â  opacity: 0.8,
Â  },
Â  section: { // Do Settings
Â  Â  marginBottom: 24,
Â  Â  paddingHorizontal: 20,
Â  },
Â  sectionTitle: { // Do Settings
Â  Â  fontSize: 13,
Â  Â  fontWeight: '600',
Â  Â  marginBottom: 12,
Â  Â  textTransform: 'uppercase',
Â  Â  letterSpacing: 0.5, // Ajustado para melhor leitura
Â  Â  paddingHorizontal: 4, 
Â  },
Â  sectionContent: { // Do Settings
Â  Â  borderRadius: 16,
Â  Â  overflow: 'hidden', // Para que os SettingItems internos respeitem o borderRadius
Â  Â  shadowOffset: { width: 0, height: 2 },
Â  Â  shadowOpacity: 0.08, // Suavizado
Â  Â  shadowRadius: 10, // Suavizado
Â  Â  elevation: 3, // Ajustado
Â  },
Â  statsRow: { // Original do Home, mas dentro de uma 'section'
Â  Â  flexDirection: 'row',
Â  Â  gap: 16, // EspaÃ§amento entre os cards
Â  },
Â  statCard: { // EstilizaÃ§Ã£o refinada
Â  Â  flex: 1,
Â  Â  padding: 16,
Â  Â  borderRadius: 12, // Consistente com iconContainer
Â  Â  alignItems: 'center', // Centraliza conteÃºdo do card
Â  Â  shadowOffset: { width: 0, height: 1 },
Â  Â  shadowOpacity: 0.1,
Â  Â  shadowRadius: 6,
Â  Â  elevation: 2,
Â  },
Â  statIconContainer: { // Similar ao iconContainer dos SettingItems
Â  Â  width: 40,
Â  Â  height: 40,
Â  Â  borderRadius: 12,
Â  Â  justifyContent: 'center',
Â  Â  alignItems: 'center',
Â  Â  marginBottom: 8, // EspaÃ§o antes do label
Â  },
Â  statLabel: {
Â  Â  fontSize: 13, // Menor para dar destaque ao valor
Â  Â  opacity: 0.8,
Â  Â  marginBottom: 4,
Â  },
Â  statAmount: {
Â  Â  fontSize: 17, // Ajustado
Â  Â  fontWeight: '600',
Â  },
Â  addButtonContainer: { // Para centralizar ou dar margem ao botÃ£o
Â  Â  paddingHorizontal: 20,
Â  Â  marginVertical: 8, // EspaÃ§o antes e depois do botÃ£o
Â  },
Â  addButton: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  justifyContent: 'center',
Â  Â  paddingVertical: 14, // Mais confortÃ¡vel ao toque
Â  Â  paddingHorizontal: 20,
Â  Â  borderRadius: 12, // Consistente
Â  Â  elevation: 2,
Â  Â  shadowOffset: { width: 0, height: 1 },
Â  Â  shadowOpacity: 0.2,
Â  Â  shadowRadius: 3,
Â  },
Â  addButtonText: {
Â  Â  color: '#fff',
Â  Â  fontSize: 16, // Ajustado
Â  Â  fontWeight: '600',
Â  },
Â  // Estilos para TransactionSettingItem (baseados no SettingItem de Settings)
Â  settingItem: {
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  Â  paddingVertical: 14, // Ajustado
Â  Â  paddingHorizontal: 16, // Ajustado
Â  Â  minHeight: 60, // Ajustado
Â  },
Â  iconContainer: { // Do Settings
Â  Â  width: 36, // Ajustado para transaÃ§Ãµes
Â  Â  height: 36, // Ajustado
Â  Â  borderRadius: 10, // Ajustado
Â  Â  justifyContent: 'center',
Â  Â  alignItems: 'center',
Â  Â  marginRight: 16,
Â  },
Â  settingContent: { // Do Settings
Â  Â  flex: 1,
Â  Â  marginRight: 12,
Â  Â  justifyContent: 'center', // Alinha melhor o texto se o subtitulo for curto
Â  },
Â  settingTitle: { // Do Settings
Â  Â  fontSize: 15, // Ajustado
Â  Â  fontWeight: '600',
Â  Â  marginBottom: 2,
Â  },
Â  settingSubtitle: { // Do Settings
Â  Â  fontSize: 12, // Ajustado
Â  Â  opacity: 0.8,
Â  Â  lineHeight: 16,
Â  },
Â  transactionDetails: { // Para o valor e chevron nas transaÃ§Ãµes
Â  Â  flexDirection: 'row',
Â  Â  alignItems: 'center',
Â  },
Â  transactionAmount: {
Â  Â  fontSize: 15,
Â  Â  fontWeight: '600',
Â  },
Â  emptyStateContainer: {
Â  Â  paddingVertical: 30,
Â  Â  alignItems: 'center',
Â  Â  justifyContent: 'center',
Â  },
Â  emptyStateText: {
Â  Â  marginTop: 8,
Â  Â  fontSize: 14,
Â  Â  opacity: 0.7,
Â  },
Â  footer: { // Do Settings
Â  Â  paddingHorizontal: 20,
Â  Â  paddingTop: 20, // Adiciona espaÃ§o acima do footer
Â  Â  paddingBottom: Platform.OS === 'ios' ? 0 : 10, // Para evitar corte em alguns androids
Â  Â  alignItems: 'center',
Â  },
Â  footerText: { // Do Settings
Â  Â  fontSize: 12,
Â  Â  textAlign: 'center',
Â  Â  opacity: 0.7,
Â  Â  lineHeight: 16,
Â  },
});